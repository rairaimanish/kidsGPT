import React, { useState, useRef } from 'react';
import axios from 'axios';

function App() {
  const [recording, setRecording] = useState(false);
  const [audioURL, setAudioURL] = useState('');
  const [responseText, setResponseText] = useState('');
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);

  const startRecording = async () => {
    setRecording(true);

    // Request microphone access
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

    // Set up the MediaRecorder
    const mediaRecorder = new MediaRecorder(stream);
    mediaRecorderRef.current = mediaRecorder;

    // When data becomes available, push it to the audioChunks array
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        audioChunksRef.current.push(event.data);
      }
    };

    // Start recording
    mediaRecorder.start();
  };

  const stopRecording = () => {
    setRecording(false);

    const mediaRecorder = mediaRecorderRef.current;
    mediaRecorder.stop();

    mediaRecorder.onstop = async () => {
      // Combine all the audio chunks into a single Blob
      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
      audioChunksRef.current = []; // Clear the chunks

      // Send the Blob to Flask API
      const formData = new FormData();
      formData.append('file', audioBlob, 'recording.wav');

      try {
        const response = await axios.post('http://localhost:5000/process_audio', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });

        // Set response text and audio URL
        setResponseText(response.data.response_text);
        setAudioURL(response.data.audio_url);
      } catch (error) {
        console.error('Error uploading and processing audio:', error);
      }
    };
  };

  return (
    <div className="App">
      <h1>Children's Expert Chatbot</h1>

      {/* Buttons to start and stop recording */}
      <button onClick={startRecording} disabled={recording}>
        Start Recording
      </button>
      <button onClick={stopRecording} disabled={!recording}>
        Stop Recording
      </button>

      {/* Display the chatbot's response */}
      {responseText && (
        <div>
          <h2>Response Text:</h2>
          <p>{responseText}</p>
        </div>
      )}

      {/* Play the audio response */}
      {audioURL && (
        <div>
          <h2>Response Audio:</h2>
          <audio controls src={audioURL}></audio>
        </div>
      )}
    </div>
  );
}

export default App;
