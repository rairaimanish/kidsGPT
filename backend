from flask import Flask, request, jsonify, send_file
import torch
import torchaudio
import whisper
from mlx_lm import load, generate
import ChatTTS
import os

app = Flask(__name__)

# Load the STT model
stt_model = whisper.load_model("base")

# Load the LLM
model, tokenizer = load('Qwen/Qwen2-7B-Instruct-MLX', tokenizer_config={"eos_token": "<|im_end|>"})

# Load the TTS model
chat = ChatTTS.Chat()
chat.load(compile=True)

# Step 1: Transcribe the audio and return transcription
@app.route('/api/transcribe', methods=['POST'])
def transcribe_audio():
    try:
        audio_file = request.files.get('audio')
        if not audio_file:
            return jsonify({"error": "No audio file provided"}), 400

        audio_path = "prompt.wav"
        audio_file.save(audio_path)

        # Step 1: Transcribe audio using Whisper (STT)
        result = stt_model.transcribe(audio_path)
        transcription = result["text"]

        return jsonify({"transcription": transcription})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Step 2: Generate LLM response + convert to speech (TTS)
@app.route('/api/respond', methods=['POST'])
def respond_with_audio():
    try:
        transcription = request.json.get("transcription")
        if not transcription:
            return jsonify({"error": "No transcription provided"}), 400

        # Step 2: Generate response using LLM
        messages = [
            {"role": "system", "content": "You are a children expert. Respond appropriately. Keep your answer simple and concise as if speaking to a child. Avoid using any special characters."},
            {"role": "user", "content": transcription}
        ]
        prompt = tokenizer.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)

        response = generate(model, tokenizer, prompt=prompt, verbose=True, top_p=0.8, temp=0.7, repetition_penalty=1.05, max_tokens=512)
        generated_text = response

        # Step 3: Convert text to speech using ChatTTS
        texts = [generated_text]
        wavs = chat.infer(texts)

        # Step 4: Save the audio response to a file
        output_wav_path = "response.wav"
        torchaudio.save(output_wav_path, torch.from_numpy(wavs[0]), 24000)

        return jsonify({
            "response_text": generated_text,
            "audio_url": "/api/audio"
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Step 3: Respond directly to text input (bypassing transcription)
@app.route('/api/respond_text', methods=['POST'])
def respond_with_text_input():
    try:
        user_input = request.json.get("text")
        if not user_input:
            return jsonify({"error": "No text input provided"}), 400

        # Step 1: Generate response using LLM
        messages = [
            {"role": "system", "content": ""You are a children expert. Respond appropriately. Keep your answer simple and concise as if speaking to a child. Avoid using any special characters."},
            {"role": "user", "content": user_input}
        ]
        prompt = tokenizer.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)

        response = generate(model, tokenizer, prompt=prompt, verbose=True, top_p=0.8, temp=0.7, repetition_penalty=1.05, max_tokens=512)
        generated_text = response

        # Step 2: Convert text to speech using ChatTTS
        texts = [generated_text]
        wavs = chat.infer(texts)

        # Step 3: Save the audio response to a file
        output_wav_path = "response.wav"
        torchaudio.save(output_wav_path, torch.from_numpy(wavs[0]), 24000)

        return jsonify({
            "response_text": generated_text,
            "audio_url": "/api/audio"
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Route to serve the generated audio file
@app.route('/api/audio', methods=['GET'])
def get_audio():
    try:
        return send_file("response.wav", as_attachment=False, mimetype="audio/wav")
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
